open System

type Row<'T> = list<'T>
type Matrix<'T> = list<Row<'T>>
type Value = char
type Grid = Matrix<Value>

let easy =          [['2';'.';'.';'.';'.';'1';'.';'3';'8']
                     ['.';'.';'.';'.';'.';'.';'.';'.';'5']
                     ['.';'7';'.';'.';'.';'6';'.';'.';'.']
                     ['.';'.';'.';'.';'.';'.';'.';'1';'3']
                     ['.';'9';'8';'1';'.';'.';'2';'5';'7']
                     ['3';'1';'.';'.';'.';'.';'8';'.';'.']
                     ['9';'.';'.';'8';'.';'.';'.';'2';'.']
                     ['.';'5';'.';'.';'6';'9';'7';'8';'4']
                     ['4';'.';'.';'2';'5';'.';'.';'.';'.']]
let gentle =        [['.';'1';'.';'4';'2';'.';'.';'.';'5']
                     ['.';'.';'2';'.';'7';'1';'.';'3';'9']
                     ['.';'.';'.';'.';'.';'.';'.';'4';'.']
                     ['2';'.';'7';'1';'.';'.';'.';'.';'6']
                     ['.';'.';'.';'.';'4';'.';'.';'.';'.']
                     ['6';'.';'.';'.';'.';'7';'4';'.';'3']
                     ['.';'7';'.';'.';'.';'.';'.';'.';'.']
                     ['1';'2';'.';'7';'3';'.';'5';'.';'.']
                     ['3';'.';'.';'.';'8';'2';'.';'7';'.']]
let diabolical =    [['.';'9';'.';'7';'.';'.';'8';'6';'.';]
                     ['.';'3';'1';'.';'.';'5';'.';'2';'.';]
                     ['8';'.';'6';'.';'.';'.';'.';'.';'.';]
                     ['.';'.';'7';'.';'5';'.';'.';'.';'6';]
                     ['.';'.';'.';'3';'.';'7';'.';'.';'.';]
                     ['5';'.';'.';'.';'1';'.';'7';'.';'.';]
                     ['.';'.';'.';'.';'.';'.';'1';'.';'9';]
                     ['.';'2';'.';'6';'.';'.';'3';'5';'.';]
                     ['.';'5';'4';'.';'.';'8';'.';'7';'.';]]
let unsolvable =    [['1';'.';'.';'9';'.';'7';'.';'.';'3']
                     ['.';'8';'.';'.';'.';'.';'.';'7';'.']
                     ['.';'.';'9';'.';'.';'.';'6';'.';'.']
                     ['.';'.';'7';'2';'.';'9';'4';'.';'.']
                     ['4';'1';'.';'.';'.';'.';'.';'9';'5']
                     ['.';'.';'8';'5';'.';'4';'3';'.';'.']
                     ['.';'.';'3';'.';'.';'.';'7';'.';'.']
                     ['.';'5';'.';'.';'.';'.';'.';'4';'.']
                     ['2';'.';'.';'8';'.';'6';'.';'.';'9']]
let minimal =       [['.';'9';'8';'.';'.';'.';'.';'.';'.']
                     ['.';'.';'.';'.';'7';'.';'.';'.';'.']
                     ['.';'.';'.';'.';'1';'5';'.';'.';'.']
                     ['1';'.';'.';'.';'.';'.';'.';'.';'.']
                     ['.';'.';'.';'2';'.';'.';'.';'.';'9']
                     ['.';'.';'.';'9';'.';'6';'.';'8';'2']
                     ['.';'.';'.';'.';'.';'.';'.';'3';'.']
                     ['5';'.';'1';'.';'.';'.';'.';'.';'.']
                     ['.';'.';'.';'4';'.';'.';'.';'2';'.']]

let boxsize = 3
let values = ['1'..'9']
let isEmpty v = (v = '.')
let isSingle l =
    match l with
    | [_] -> true
    | _ -> false
let empty = 
    let createEmpty n = List.init n (fun _ -> List.init n (fun _ -> '.'))
    createEmpty (boxsize * boxsize)
let rows (m : Matrix<'T>) : Matrix<'T> = m
let cols : Matrix<'T> -> Matrix<'T> = 
    let rec transpose = function
        | (_::_)::_ as m -> List.map List.head m :: transpose (List.map List.tail m)
        | _ -> []
    transpose
let boxs (m : Matrix<'T>) : Matrix<'T> =
    let split = List.chunkBySize boxsize 
    let pack = split >> List.map split
    let unpack = List.map List.concat >> List.concat
    m |> unpack >> List.map cols >> pack

[<EntryPoint>]
let main argv =
    printfn "Hello World from F#!"
    0 // return an integer exit code
